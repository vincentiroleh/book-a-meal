{"version":3,"sources":["../../api/controllers/order.controller.js"],"names":["OrderController","req","res","body","meal","status","send","message","quantity","delivery_address","newOrder","id","Order","length","push","parseInt","params","foundOrder","itemIndex","map","index","updatedOrder","splice","Orders","orderController"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport Order from '../utils/order.Db';\n\nclass OrderController {\n  // Post Orders (Select the meal option from the menu)\n  createOrder(req, res) {\n    if (!req.body.meal) {\n      return res.status(400).send({\n        status: 'false',\n        message: 'meal required',\n      });\n    } if (!req.body.quantity) {\n      return res.status(400).send({\n        status: 'false',\n        message: 'quantity of food is required',\n      });\n    } if (!req.body.delivery_address) {\n      return res.status(400).send({\n        status: 'false',\n        message: 'Delivery address is required',\n      });\n    }\n    const newOrder = {\n      id: Order.length + 1,\n      meal: req.body.meal,\n      quantity: req.body.quantity,\n      delivery_address: req.body.delivery_address,\n    };\n    Order.push(newOrder);\n    return res.status(201).send({\n      status: 'true',\n      message: 'Order placed successfully',\n      newOrder,\n    });\n  }\n\n  // Modify an order\n  updateOrder(req, res) {\n    const id = parseInt(req.params.id, 10);\n\n    let foundOrder;\n    let itemIndex;\n\n    Order.map((meal, index) => {\n      if (meal.id === id) {\n        foundOrder = meal;\n\n        itemIndex = index;\n      }\n    });\n\n    if (!foundOrder) {\n      return res.status(404).send({\n\n        status: 'false',\n\n        message: 'Order not found',\n      });\n    }\n\n    if (!req.body.meal) {\n      return res.status(400).send({\n\n        status: 'false',\n\n        message: 'meal is required',\n      });\n    } if (!req.body.quantity) {\n      return res.status(400).send({\n\n        status: 'false',\n\n        message: 'quantity of order is required',\n\n      });\n    } if (!req.body.delivery_address) {\n      return res.status(400).send({\n\n        status: 'false',\n\n        message: 'delivery_address is required',\n      });\n    }\n\n    const updatedOrder = {\n      id: foundOrder.id,\n\n      meal: req.body.meal || foundOrder.meal,\n\n      quantity: req.body.quantity || foundOrder.quantity,\n\n      delivery_address: req.body.delivery_address || foundOrder.delivery_address,\n\n    };\n\n    Order.splice(itemIndex, 1, updatedOrder);\n\n    return res.status(201).send({\n      status: 'true',\n      message: 'Order updated successfully',\n      updatedOrder,\n    });\n  }\n\n  // Get orders (Get all the orders)\n  getAllOrders(req, res) {\n    const Orders = Order;\n    return res.status(200).send({\n      status: 'true',\n      message: 'Orders retrieved successfully',\n      Orders,\n    });\n  }\n}\nconst orderController = new OrderController();\nexport default orderController;\n"],"file":"order.controller.js"}